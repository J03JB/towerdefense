set game size




fn load_level(
    mut commands: Commands,
    asset_server: Res<AssetServer>,
    level_assets: Res<Assets<LevelData>>,
) {
    // Load level file
    let level_handle = asset_server.load("levels/level_1.json");
    
    if let Some(level_data) = level_assets.get(&level_handle) {
        // Convert path from JSON format to game format
        let path_tiles: Vec<UVec2> = level_data.path
            .iter()
            .map(|coords| UVec2::new(coords[0], coords[1]))
            .collect();
            
        // Create Map resource from loaded data
        let map = Map {
            grid_size: Vec2::new(48.0, 48.0),
            dimensions: UVec2::new(level_data.dimensions[0], level_data.dimensions[1]),
            path_tiles,
            buildable_tiles: level_data.buildable_areas
                .iter()
                .map(|coords| UVec2::new(coords[0], coords[1]))
                .collect(),
            start: UVec2::new(level_data.start[0], level_data.start[1]),
            end: UVec2::new(level_data.end[0], level_data.end[1]),
        };
        
        commands.insert_resource(map);
    }
}

use bevy::asset::{AssetLoader, LoadContext, LoadedAsset};
use bevy::utils::BoxedFuture;
use std::io::Read;

#[derive(Default)]
pub struct LevelAssetLoader;

impl AssetLoader for LevelAssetLoader {
    fn load<'a>(
        &'a self,
        bytes: &'a [u8],
        load_context: &'a mut LoadContext,
    ) -> BoxedFuture<'a, Result<(), bevy::asset::Error>> {
        Box::pin(async move {
            let level_data: LevelData = serde_json::from_slice(bytes)?;
            load_context.set_default_asset(LoadedAsset::new(level_data));
            Ok(())
        })
    }

    fn extensions(&self) -> &[&str] {
        &["json"]
    }
}
